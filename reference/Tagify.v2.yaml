openapi: 3.0.0
info:
  title: Tagify.v2
  version: "2.0"
servers:
  - url: "http://localhost:3000"
paths:
  /api/login:
    post:
      summary: Login
      tags: []
      responses:
        "200":
          description: OK
        "400":
          description: Bad Request
      operationId: post-api-login
      description: login endpoint for user and admin
      requestBody:
        content:
          application/json:
            schema:
              type: object
              properties:
                username:
                  type: string
                password:
                  type: string
  /api/admin/users:
    get:
      summary: get all users
      tags:
        - "admin->user"
      responses:
        "200":
          description: OK
          content:
            application/json:
              schema:
                type: object
                properties:
                  user_id:
                    type: number
                  username:
                    type: string
                  nickname:
                    type: string
                  role:
                    type: string
        "401":
          description: Unauthorized
      operationId: get-api-admin-users
      description: get all users from DB
    post:
      summary: create new user
      operationId: post-api-admin-users
      responses:
        "201":
          description: Created
        "401":
          description: Unauthorized
      requestBody:
        content:
          application/json:
            schema:
              type: object
              properties:
                user_name:
                  type: string
                password:
                  type: string
                role:
                  type: string
      tags:
        - "admin->user"
      description: crate new user account
  "/api/admin/user/{user_id}":
    parameters:
      - schema:
          type: string
        name: user_id
        in: path
        required: true
    get:
      summary: get user bei ID
      tags:
        - "admin->user"
      responses:
        "200":
          description: OK
          content:
            application/json:
              schema:
                type: object
                properties:
                  user_id:
                    type: number
                  username:
                    type: string
                  nickname:
                    type: string
                  role:
                    type: string
                  albums_id:
                    type: array
                    items:
                      type: number
                  everything from DB.....:
                    type: string
      operationId: get-api-admin-user-user_id
      description: get user by id with all user data
    put:
      summary: change user password
      tags:
        - "admin->user"
      responses:
        "200":
          description: OK
        "401":
          description: Unauthorized
      operationId: put-api-admin-user-user_id
      description: change user password
      requestBody:
        content:
          application/json:
            schema:
              type: object
              properties:
                password:
                  type: string
    delete:
      summary: delete user account
      tags:
        - "admin->user"
      responses:
        "200":
          description: OK
        "401":
          description: Unauthorized
      operationId: delete-api-admin-user-user_id
      description: delete user account
  /api/user/logout:
    post:
      summary: logout as a user
      tags:
        - user
      responses:
        "200":
          description: OK
        "401":
          description: Unauthorized
      operationId: post-api-user-logout
      description: logout as a user
  /api/admin/logout:
    post:
      summary: logout as an admin
      tags:
        - admin
      responses:
        "200":
          description: OK
        "401":
          description: Unauthorized
      operationId: post-api-admin-logout
      description: logout as an admin
  /api/user/me:
    get:
      summary: get all my data
      tags:
        - user
      responses:
        "200":
          description: OK
          content:
            application/json:
              schema:
                type: object
                properties:
                  user_id:
                    type: string
                  username:
                    type: string
                  nickname:
                    type: string
                  role:
                    type: string
                  albums....... data:
                    type: string
        "401":
          description: Unauthorized
      operationId: get-api-user-me
      description: get all my data from DB
    put:
      summary: update my nickname
      tags:
        - user
      responses:
        "200":
          description: OK
        "401":
          description: Unauthorized
      operationId: put-api-user-me
      description: update user nickname
    delete:
      summary: delete my account
      tags:
        - user
      responses:
        "200":
          description: OK
        "401":
          description: Unauthorized
      operationId: delete-api-user-me
      description: delete my own account
  /api/user/me/password:
    put:
      summary: change password
      tags:
        - user
      responses:
        "200":
          description: OK
        "401":
          description: Unauthorized
      operationId: put-api-user-me-password
      description: change own password
      requestBody:
        content:
          application/json:
            schema:
              type: object
              properties:
                password:
                  type: string
  /api/admin/albums:
    get:
      summary: get all albums
      tags:
        - "admin->albums"
      responses:
        "200":
          description: OK
          content:
            application/json:
              schema:
                type: object
                properties:
                  album_id:
                    type: number
                  "album:_name":
                    type: string
                  photos:
                    type: number
                  tagged_photos:
                    type: number
                  first_photo:
                    type: string
        "401":
          description: Unauthorized
      operationId: get-api-admin-albums
      description: get all albums from DB
  "/api/admin/albums/{album_id}":
    parameters:
      - schema:
          type: string
        name: album_id
        in: path
        required: true
    get:
      summary: get album by id
      tags:
        - "admin->albums"
      responses:
        "200":
          description: OK
          content:
            application/json:
              schema:
                type: object
                properties:
                  album_id:
                    type: number
                  album_name:
                    type: string
                  album_tags:
                    type: array
                    items:
                      type: string
                  photos:
                    type: number
                  tagged_photos:
                    type: number
                  first_photo:
                    type: string
        "401":
          description: Unauthorized
      operationId: get-api-admin-albums-album_id
      description: get album by ID
    delete:
      summary: delete album
      tags:
        - "admin->albums"
      responses:
        "200":
          description: OK
        "401":
          description: Unauthorized
      operationId: delete-api-admin-albums-album_id
      description: delete album with all photos
    put:
      summary: change album data
      tags:
        - "admin->albums"
      responses:
        "200":
          description: OK
        "401":
          description: Unauthorized
      operationId: put-api-admin-albums-album_id
      description: update album data
      requestBody:
        content:
          application/json:
            schema:
              type: object
              properties:
                album_name:
                  type: string
                description:
                  type: string
  /api/user/albums:
    get:
      summary: get all own albums
      tags:
        - "user->album"
      responses:
        "200":
          description: OK
          content:
            application/json:
              schema:
                type: array
                items:
                  type: object
                  properties:
                    id:
                      type: string
                    title:
                      type: string
                    description:
                      type: string
                    tags:
                      type: array
                      items:
                        type: string
                    image_number:
                      type: string
                    tagged_number:
                      type: string
                    users_id:
                      type: string
                    first_photo:
                      type: string
              examples:
                example:
                  value:
                    - id: 1
                      title: "124444323"
                      description: test123 super album
                      tags:
                        - back cat
                        - white cat
                        - dog
                      image_number: 0
                      tagged_number: 0
                      users_id: 2
                      first_photo: default_path
        "401":
          description: Unauthorized
      operationId: get-api-user-albums
      description: get own albums
    post:
      summary: create new album
      operationId: post-api-user-albums
      responses:
        "200":
          description: OK
          content:
            application/json:
              schema:
                type: object
                properties:
                  id:
                    type: string
                  title:
                    type: string
                  description:
                    type: string
                  tags:
                    type: array
                    items:
                      type: string
                  image_number:
                    type: string
                  tagged_number:
                    type: string
                  users_id:
                    type: string
                  first_photo:
                    type: string
              examples:
                example:
                  value:
                    id: 2
                    title: "124444323"
                    description: test123 super album
                    tags:
                      - back cat
                      - white cat
                      - dog
                    image_number: 0
                    tagged_number: 0
                    users_id: 2
                    first_photo: default_path
        "401":
          description: Unauthorized
      tags:
        - "user->album"
      description: create new album
      requestBody:
        content:
          application/json:
            schema:
              type: object
              properties:
                title:
                  type: string
                desctiption:
                  type: string
                tags:
                  type: array
                  items:
                    type: string
            examples:
              example:
                value:
                  title: cats
                  description: test123 super album
                  tags:
                    - back cat
                    - white cat
                    - dog
    parameters: []
  "/api/user/albums/{albums_id}":
    parameters:
      - schema:
          type: string
        name: albums_id
        in: path
        required: true
    get:
      summary: get album by id
      tags:
        - "user->album"
      responses:
        "200":
          description: OK
          content:
            application/json:
              schema:
                type: object
                properties:
                  id:
                    type: string
                  title:
                    type: string
                  description:
                    type: string
                  tags:
                    type: array
                    items:
                      type: string
                  image_numbser:
                    type: string
                  tagged_number:
                    type: string
                  users_id:
                    type: string
                  first_photo:
                    type: string
              examples:
                example:
                  value:
                    id: 4
                    title: "32312323"
                    description: test123 super album
                    tags:
                      - back cat
                      - white cat
                      - dog
                    image_number: 0
                    tagged_number: 0
                    users_id: 2
                    first_photo: default_path
        "401":
          description: Unauthorized
      operationId: get-api-user-albums-albums_id
      description: get album be id
    post:
      summary: add photos to album
      tags:
        - "user->album"
      responses:
        "200":
          description: OK
        "401":
          description: Unauthorized
      operationId: post-api-user-albums-albums_id
      description: add photos to album
    put:
      summary: change album data
      tags:
        - "user->album"
      responses:
        "200":
          description: OK
        "201":
          description: Created
      operationId: put-api-user-albums-albums_id
      description: update album name or description
    delete:
      summary: delete album
      tags:
        - "user->album"
      responses:
        "200":
          description: OK
        "401":
          description: Unauthorized
      operationId: delete-api-user-albums-albums_id
      description: delete album by id
  /status:
    get:
      summary: get server status
      tags: []
      responses:
        "200":
          description: "OK, server is working"
        "404":
          description: Not Found
        "500":
          description: Internal Server Error
      operationId: get-status
      description: get server status
  /api/albums:
    get:
      summary: get albums for preview
      tags:
        - album
      operationId: get-api-albums
      description: get albums for prewiew (all albums from DB)
      responses:
        "200":
          description: OK
          content:
            application/json:
              schema:
                allOf:
                  - properties:
                      album_id:
                        type: string
                      album_name:
                        type: string
                      first_photo:
                        type: string
                  - properties:
                      album_id:
                        type: string
                      album_name:
                        type: string
                      first_photo:
                        type: string
                type: object
  "/api/albums/{album_id}":
    parameters:
      - schema:
          type: string
        name: album_id
        in: path
        required: true
    get:
      summary: get album by ID
      tags:
        - album
      responses:
        "200":
          description: OK
          content:
            application/json:
              schema:
                type: object
                properties:
                  album_id:
                    type: string
                  album_name:
                    type: string
                  tags:
                    type: array
                    items:
                      type: string
                  description:
                    type: string
                  owner:
                    type: string
      operationId: get-api-albums-album_id
      description: get album by id only for prewiew
  "/api/albums/{album_id}/photos/{index}":
    parameters:
      - schema:
          type: string
        name: album_id
        in: path
        required: true
      - schema:
          type: string
        name: index
        in: path
        required: true
    get:
      summary: get photos from album (preview)
      tags:
        - album
      responses:
        "200":
          description: OK
          content:
            application/json:
              schema:
                type: object
                properties:
                  "":
                    type: string
      operationId: get-api-albums-album_id-photos-photo_id
      description: "get photos from album just for preview\n\nresponse:\n  list of links to photo server, number not defined (15-20-30-50) ??????\n  \nfirst call -> index = 0\n\nif you want get more photos from album change index :D \n"
  "/api/user/tag/{album_id}":
    parameters:
      - schema:
          type: string
        name: album_id
        in: path
        required: true
    get:
      summary: get 15 photos for tagging
      tags:
        - "user->tag"
      responses:
        "200":
          description: OK
          content:
            application/json:
              schema:
                allOf:
                  - properties:
                      album_id:
                        type: number
                      album_name:
                        type: string
                      tags:
                        type: string
                  - properties:
                      photo_id:
                        type: number
                      link:
                        type: string
                      actual_tag:
                        type: string
                      coordinates:
                        type: array
                        items:
                          type: number
                      verified:
                        type: boolean
                      tagged:
                        type: boolean
                      lock_time_stamp:
                        type: number
                type: object
      operationId: get-api-user-tag-album_id
      description: get photos for taging (lock 15 photos for 10min)
  "/api/user/tag/{album_id}/action{photo_id}":
    parameters:
      - schema:
          type: string
        name: album_id
        in: path
        required: true
      - schema:
          type: string
        name: photo_id
        in: path
        required: true
    post:
      summary: set first tag
      tags:
        - "user->tag"
      responses:
        "200":
          description: OK
      operationId: post-api-user-tag-album_id-action-photo_id
      description: set first tag
      requestBody:
        content:
          application/json:
            schema:
              type: object
              properties:
                album_id:
                  type: string
                photo_id:
                  type: string
                actual_tag:
                  type: string
                coordinates:
                  type: string
    put:
      summary: verify tag
      tags:
        - "user->tag"
      responses:
        "200":
          description: OK
      operationId: put-api-user-tag-album_id-action-photo_id
      requestBody:
        content:
          application/json:
            schema:
              type: object
              properties:
                verify:
                  type: boolean
      description: verify tag
  "/api/admin/albums/{album_id}/photos/{photo_id}":
    parameters:
      - schema:
          type: string
        name: album_id
        in: path
        required: true
      - schema:
          type: string
        name: photo_id
        in: path
        required: true
    delete:
      summary: delete photo from album by id
      tags:
        - "admin->photo"
      responses:
        "200":
          description: OK
        "401":
          description: Unauthorized
      operationId: delete-api-admin-albums-album_id-photos-photo_id
  "/api/user/albums/{album_id}/photos/{photo_id}":
    parameters:
      - schema:
          type: string
        name: album_id
        in: path
        required: true
      - schema:
          type: string
        name: photo_id
        in: path
        required: true
    delete:
      summary: delete photo from album
      tags:
        - "user->photo"
      responses:
        "200":
          description: OK
        "401":
          description: Unauthorized
      operationId: delete-api-user-albums-album_id-photos-photo_id
components:
  schemas: {}
